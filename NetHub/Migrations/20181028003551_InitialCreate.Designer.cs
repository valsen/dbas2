// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetHub.Models;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace NetHub.Migrations
{
    [DbContext(typeof(NetHubContext))]
    [Migration("20181028003551_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("NetHub.Models.Actor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Birthdate");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("ID");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("NetHub.Models.ActsIn", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActorID");

                    b.Property<int>("MovieID");

                    b.HasKey("ID");

                    b.HasIndex("ActorID");

                    b.HasIndex("MovieID");

                    b.ToTable("ActsIn");
                });

            modelBuilder.Entity("NetHub.Models.Director", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Birthdate");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("ID");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("NetHub.Models.DirectorOf", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DirectorID");

                    b.Property<int>("MovieID");

                    b.HasKey("ID");

                    b.HasIndex("DirectorID");

                    b.HasIndex("MovieID");

                    b.ToTable("DirectorOf");
                });

            modelBuilder.Entity("NetHub.Models.Genre", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("NetHub.Models.GenreOf", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GenreID");

                    b.Property<int>("MovieID");

                    b.HasKey("ID");

                    b.HasIndex("GenreID");

                    b.HasIndex("MovieID");

                    b.ToTable("GenreOf");
                });

            modelBuilder.Entity("NetHub.Models.Movie", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Language");

                    b.Property<int>("Runtime");

                    b.Property<string>("Title");

                    b.Property<int>("Year");

                    b.HasKey("ID");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("NetHub.Models.ProdCompany", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("ProdCompanies");
                });

            modelBuilder.Entity("NetHub.Models.ProdCompanyFor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MovieID");

                    b.Property<int>("ProdCompanyID");

                    b.HasKey("ID");

                    b.HasIndex("MovieID");

                    b.HasIndex("ProdCompanyID");

                    b.ToTable("ProdCompanyFor");
                });

            modelBuilder.Entity("NetHub.Models.ActsIn", b =>
                {
                    b.HasOne("NetHub.Models.Actor", "Actor")
                        .WithMany("ActsIn")
                        .HasForeignKey("ActorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NetHub.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NetHub.Models.DirectorOf", b =>
                {
                    b.HasOne("NetHub.Models.Director", "Director")
                        .WithMany("DirectorOf")
                        .HasForeignKey("DirectorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NetHub.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NetHub.Models.GenreOf", b =>
                {
                    b.HasOne("NetHub.Models.Genre", "Genre")
                        .WithMany("GenreOf")
                        .HasForeignKey("GenreID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NetHub.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NetHub.Models.ProdCompanyFor", b =>
                {
                    b.HasOne("NetHub.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NetHub.Models.ProdCompany", "ProdCompany")
                        .WithMany("ProdCompanyFor")
                        .HasForeignKey("ProdCompanyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
